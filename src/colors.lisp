(defpackage colors
  (:use :cl)
  (:export :color :make-color :color-red :color-green :color-blue :color-p :add :sub :neg :mul :div))

(in-package :colors)

(defstruct color (red 0.0) (green 0.0) (blue 0.0))


(defun add (t1 t2)
  (cond
    ((and (color-p t1) (color-p t2))
     (make-color :red (+ (color-red t1) (color-red t2))
                 :green (+ (color-green t1) (color-green t2))
                 :blue (+ (color-blue t1) (color-blue t2))
                 ))
    ((and (color-p t1) (numberp t2))
     (make-color :red (+ (color-red t1) t2)
                 :green (+ (color-green t1) t2)
                 :blue (+ (color-blue t1) t2)
                 ))
    ((and (numberp t1) (color-p t2))
     (make-color :red (+ t1 (color-red t2))
                 :green (+ t1 (color-green t2))
                 :blue (+ t1 (color-blue t2))
                 ))    
    )
  )

(defun sub (t1 t2)
  (cond
    ((and (color-p t1) (color-p t2))
     (make-color :red (- (color-red t1) (color-red t2))
                 :green (- (color-green t1) (color-green t2))
                 :blue (- (color-blue t1) (color-blue t2))
                 ))
    ((and (color-p t1) (numberp t2))
     (make-color :red (- (color-red t1) t2)
                 :green (- (color-green t1) t2)
                 :blue (- (color-blue t1) t2)
                 ))
    ((and (numberp t1) (color-p t2))
     (make-color :red (- t1 (color-red t2))
                 :green (- t1 (color-green t2))
                 :blue (- t1 (color-blue t2))
                 ))    
    )
  )

(defun neg (t1)
  (make-color :red (- (color-red t1))
              :green (- (color-green t1))
              :blue (- (color-blue t1))
              )
  )

(defun mul (t1 t2)
  (cond
    ((and (color-p t1) (color-p t2))
     (make-color :red (* (color-red t1) (color-red t2))
                 :green (* (color-green t1) (color-green t2))
                 :blue (* (color-blue t1) (color-blue t2))
                 ))
    ((and (color-p t1) (numberp t2))
     (make-color :red (* (color-red t1) t2)
                 :green (* (color-green t1) t2)
                 :blue (* (color-blue t1) t2)
                 ))
    ((and (numberp t1) (color-p t2))
     (make-color :red (* t1 (color-red t2))
                 :green (* t1 (color-green t2))
                 :blue (* t1 (color-blue t2))
                 ))    
    )
  )

(defun div (t1 t2)
  (cond
    ((and (color-p t1) (numberp t2))
     (make-color :red (/ (color-red t1) t2)
                 :green (/ (color-green t1) t2)
                 :blue (/ (color-blue t1) t2)
                 ))    
    )
  )

