(defpackage tuples
  (:use :cl)
  (:export :tuple :make-tuple :tuple-x :tuple-y :tuple-z :tuple-w :tuple-p :make-point :make-vector :point-p :vector-p :add :sub :neg :magnitude :normalize :dot :cross :at :put)
  )

(in-package :tuples)

(defclass tuple ()
  ((data :initarg :value :initform (make-array 4 :initial-element 0.0))))

(defun make-point (x y z)
  (make-instance 'tuple :data (make-array 4 :initial-contents (list x y z 1.0))))

(defun make-vector (x y z)
  (make-instance 'tuple :data (make-array 4 :initial-contents (list x y z 0.0))))

(defun point-p (p)
  (and (typep p 'tuple) (equal (tuple-w p) 1.0)))

(defun vector-p (p)
  (and (typep p 'tuple) (equal (tuple-w p) 0.0)))

(defun add (t1 t2)
  (cond
    ((and (tuple-p t1) (tuple-p t2))
     (make-tuple :x (+ (tuple-x t1) (tuple-x t2))
                 :y (+ (tuple-y t1) (tuple-y t2))
                 :z (+ (tuple-z t1) (tuple-z t2))
                 :w (+ (tuple-w t1) (tuple-w t2))))
    ((and (tuple-p t1) (numberp t2))
     (make-tuple :x (+ (tuple-x t1) t2)
                 :y (+ (tuple-y t1) t2)
                 :z (+ (tuple-z t1) t2)
                 :w (+ (tuple-w t1) t2)))
    ((and (numberp t1) (tuple-p t2))
     (make-tuple :x (+ t1 (tuple-x t2))
                 :y (+ t1 (tuple-y t2))
                 :z (+ t1 (tuple-z t2))
                 :w (+ t1 (tuple-w t2))))    
    )
  )

(defun sub (t1 t2)
  (cond
    ((and (tuple-p t1) (tuple-p t2))
     (make-tuple :x (- (tuple-x t1) (tuple-x t2))
                 :y (- (tuple-y t1) (tuple-y t2))
                 :z (- (tuple-z t1) (tuple-z t2))
                 :w (- (tuple-w t1) (tuple-w t2))))
    ((and (tuple-p t1) (numberp t2))
     (make-tuple :x (- (tuple-x t1) t2)
                 :y (- (tuple-y t1) t2)
                 :z (- (tuple-z t1) t2)
                 :w (- (tuple-w t1) t2)))
    ((and (numberp t1) (tuple-p t2))
     (make-tuple :x (- t1 (tuple-x t2))
                 :y (- t1 (tuple-y t2))
                 :z (- t1 (tuple-z t2))
                 :w (- t1 (tuple-w t2))))    
    )
  )

(defun neg (t1)
  (make-tuple :x (- (tuple-x t1))
              :y (- (tuple-y t1))
              :z (- (tuple-z t1))
              :w (- (tuple-w t1)))
  )

(defun mul (t1 t2)
  (cond
    ((and (tuple-p t1) (numberp t2))
     (make-tuple :x (* (tuple-x t1) t2)
                 :y (* (tuple-y t1) t2)
                 :z (* (tuple-z t1) t2)
                 :w (* (tuple-w t1) t2)))
    ((and (numberp t1) (tuple-p t2))
     (make-tuple :x (* t1 (tuple-x t2))
                 :y (* t1 (tuple-y t2))
                 :z (* t1 (tuple-z t2))
                 :w (* t1 (tuple-w t2))))    
    )
  )

(defun div (t1 t2)
  (cond
    ((and (tuple-p t1) (numberp t2))
     (make-tuple :x (/ (tuple-x t1) t2)
                 :y (/ (tuple-y t1) t2)
                 :z (/ (tuple-z t1) t2)
                 :w (/ (tuple-w t1) t2)))    
    )
  )

(defun magnitude (t1)
  (cond
    ((tuple-p t1)
     (sqrt (+ (* (tuple-x t1) (tuple-x t1))
              (* (tuple-y t1) (tuple-y t1))
              (* (tuple-z t1) (tuple-z t1))
              (* (tuple-w t1) (tuple-w t1))))
     )
    )
  )

(defun normalize (t1)
  (let ((mag (magnitude t1)))
    (make-tuple :x (/ (tuple-x t1) mag)
                :y (/ (tuple-y t1) mag)
                :z (/ (tuple-z t1) mag)
                :w (/ (tuple-w t1) mag))
    )
  )


(defun dot (t1 t2)
  (+ (* (tuple-x t1) (tuple-x t2))
     (* (tuple-y t1) (tuple-y t2))
     (* (tuple-z t1) (tuple-z t2))
     (* (tuple-w t1) (tuple-w t2)))
  )


(defun cross (t1 t2)
  (make-vector (- (* (tuple-y t1) (tuple-z t2))
                  (* (tuple-z t1) (tuple-y t2)))
               (- (* (tuple-z t1) (tuple-x t2))
                  (* (tuple-x t1) (tuple-z t2)))
               (- (* (tuple-x t1) (tuple-y t2))
                  (* (tuple-y t1) (tuple-x t2)))
              )
  )

(defun at (tup i)
  (cond ((= i 0) (tuple-x tup))
        ((= i 1) (tuple-y tup))
        ((= i 2) (tuple-z tup))
        ((= i 3) (tuple-w tup))
        )
  )

(defun put (tup i v)
  (cond ((= i 0) (setf (tuple-x tup) v))
        ((= i 1) (setf (tuple-y tup) v))
        ((= i 2) (setf (tuple-z tup) v))
        ((= i 3) (setf (tuple-w tup) v))
        )
  )
